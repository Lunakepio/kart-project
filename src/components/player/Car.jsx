/* eslint-disable react/prop-types */
/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 --shadows .\trackmania_sportcar_model.glb 
Author: amogusstrikesback2 (https://sketchfab.com/amogusstrikesback2)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/trackmania-sportcar-model-369fc6de70c449e392ea0fa6fe413c9f
Title: trackmania sportcar model
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { MathUtils } from "three";

export function Car({ kart }) {
  const { nodes, materials } = useGLTF(
    "./models/trackmania_sportcar_model.glb"
  );
  const FR = useRef(null);
  const FL = useRef(null);
  const RR = useRef(null);
  const RL = useRef(null);
  const frontTyreLeft = useRef(null);
  const frontTyreRight = useRef(null);
  const rearLeftLight = useRef(null);
  const rearRightLight = useRef(null);

  const maxLightIntensity = 1;
  useFrame(() => {
    if (!kart.current) return;
    if (kart.current.speed !== undefined) {
      FR.current.rotation.x += kart.current.speed;
      FL.current.rotation.x += kart.current.speed;
      RR.current.rotation.x += kart.current.speed;
      RL.current.rotation.x += kart.current.speed;
      // frontTyreLeft.current.rotation.y = -kart.current.rotationSpeed * 15;
      // FL.current.rotation.y = -kart.current.rotationSpeed * 5;
      // frontTyreRight.current.rotation.y = kart.current.rotationSpeed * 15;
      // FR.current.rotation.y = kart.current.rotationSpeed * 15;
      if(kart.current.isBreaking){
        rearLeftLight.current.intensity = MathUtils.lerp(rearLeftLight.current.intensity, maxLightIntensity, 0.05);
        rearRightLight.current.intensity = MathUtils.lerp(rearRightLight.current.intensity, maxLightIntensity, 0.05);
      } else {
        rearLeftLight.current.intensity = MathUtils.lerp(rearLeftLight.current.intensity, 0.1, 0.05);
        rearRightLight.current.intensity = MathUtils.lerp(rearRightLight.current.intensity, 0.1, 0.05);
      } 
      if (kart.current.reverse) {
        rearLeftLight.current.color.g = 1;
        rearLeftLight.current.color.b = 1;
        rearRightLight.current.color.b = 1;
        rearRightLight.current.color.g = 1;
        rearLeftLight.current.intensity = MathUtils.lerp(rearLeftLight.current.intensity, maxLightIntensity / 2, 0.05);
        rearRightLight.current.intensity = MathUtils.lerp(rearRightLight.current.intensity, maxLightIntensity / 2, 0.05);
      } else {
        rearLeftLight.current.color.g = 0;
        rearLeftLight.current.color.b = 0;
        rearRightLight.current.color.b = 0;
        rearRightLight.current.color.g = 0;
      }

    }

    // FL.current.rotation.x += kart.current.speed
  });
  return (
    <group dispose={null}>
      <group scale={0.2} rotation-y={Math.PI} position-y={-0.5}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["Details_13_-_Default_0"].geometry}
          material={materials["13_-_Default"]}
        />

        <pointLight castShadow ref={rearRightLight} color={0xff0000} intensity={0.1} position={[-1.8, 1.6, -5.5]}/>
        <pointLight castShadow ref={rearLeftLight} color={0xff0000} intensity={0.1} position={[1.8, 1.6, -5.5]}/>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["Glass_13_-_Default002_0"].geometry}
          material={materials["13_-_Default.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Skin_skin_0.geometry}
          material={materials.skin}
        />
        <group >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes["WheelFront001_13_-_Default003_0"].geometry}
            material={materials["13_-_Default.003"]}
            position={[-2.235, 0.861, 2.914]}
            ref={frontTyreRight}
          />
          <mesh
            castShadow
            receiveShadow
            ref={FR}
            geometry={nodes["WheelFront002_13_-_Default007_0"].geometry}
            material={materials["13_-_Default.007"]}
            position={[-2.235, 0.861, 2.914]}
          />

          <mesh
            castShadow
            receiveShadow
            geometry={nodes["WheelFront006_13_-_Default007_0"].geometry}
            material={materials["13_-_Default.007"]}
            position={[2.24, 0.861, 2.914]}
            rotation={[Math.PI, 0, Math.PI]}
            ref={FL}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes["WheelFront005_13_-_Default006_0"].geometry}
            material={materials["13_-_Default.006"]}
            position={[2.24, 0.861, 2.914]}
            rotation={[Math.PI, 0, Math.PI]}
            ref={frontTyreLeft}
          />
        </group>
        <group>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes["WheelFront004_13_-_Default005_0"].geometry}
            material={materials["13_-_Default.005"]}
            position={[-2.235, 0.861, -3.518]}
          />
          <mesh
            castShadow
            receiveShadow
            ref={RR}
            geometry={nodes["WheelFront003_13_-_Default007_0"].geometry}
            material={materials["13_-_Default.007"]}
            position={[-2.235, 0.861, -3.518]}
          />
        </group>
        <group>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes["WheelFront008_13_-_Default009_0"].geometry}
            material={materials["13_-_Default.009"]}
            position={[2.24, 0.861, -3.518]}
            rotation={[Math.PI, 0, Math.PI]}
          />
          <mesh
            castShadow
            receiveShadow
            ref={RL}
            geometry={nodes["WheelFront007_13_-_Default007_0"].geometry}
            material={materials["13_-_Default.007"]}
            position={[2.24, 0.861, -3.518]}
            rotation={[Math.PI, 0, Math.PI]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("./models/trackmania_sportcar_model.glb");
