/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 antenna.glb 
*/

import React, { useEffect, useRef } from "react";
import { useGraph, useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { WiggleBone } from "wiggle/spring";

export function Antenna(props) {
  const { scene } = useGLTF("/models/antenna.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const wiggleBones = useRef([]);
  useEffect(() => {
    nodes.Bone.traverse((bone) => {
      if (bone.isBone && bone !== nodes.Bone && bone !== nodes.Bone004) {
        const wiggleBone = new WiggleBone(bone, {
          damping: 28,
          stiffness: 1700,
        });
        wiggleBones.current.push(wiggleBone);
      }
    });
    return () => {
      wiggleBones.current.forEach((wiggleBone) => {
        wiggleBone.reset();
        wiggleBone.dispose();
      });
    };
  }, [nodes]);

  useFrame((state, delta) => {
    wiggleBones.current.forEach((wiggleBone) => {
      wiggleBone.update(delta);
    });
  });
  return (
    <group {...props} dispose={null}>
      <primitive object={nodes.Bone} />
      <skinnedMesh
        geometry={nodes.Circle002.geometry}
        material={materials["Material.001"]}
        skeleton={nodes.Circle002.skeleton}
        castShadow
        receiveShadow
      />
      <skinnedMesh
        geometry={nodes.Circle002_1.geometry}
        material={materials["Material.002"]}
        skeleton={nodes.Circle002_1.skeleton}
        castShadow
        receiveShadow
      />
    </group>
  );
}

useGLTF.preload("/models/antenna.glb");
